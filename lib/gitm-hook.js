#!/usr/bin/env node
"use strict";require("core-js/modules/es.symbol");require("core-js/modules/es.symbol.description");require("core-js/modules/es.array.concat");require("core-js/modules/es.array.for-each");require("core-js/modules/es.array.includes");require("core-js/modules/es.function.name");require("core-js/modules/es.object.to-string");require("core-js/modules/es.promise");require("core-js/modules/es.regexp.exec");require("core-js/modules/es.string.includes");require("core-js/modules/es.string.match");require("core-js/modules/es.string.replace");require("core-js/modules/es.string.split");require("core-js/modules/web.dom-collections.for-each");require("regenerator-runtime/runtime");function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg);var value=info.value}catch(error){reject(error);return}if(info.done){resolve(value)}else{Promise.resolve(value).then(_next,_throw)}}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(undefined)})}}var program=require("commander");var fs=require("fs");var sh=require("shelljs");var _require=require("./conf/build"),options=_require.options,args=_require.args;var _require2=require("./js/index"),queue=_require2.queue,success=_require2.success,warning=_require2.warning,getCurrent=_require2.getCurrent,getLogs=_require2.getLogs,compareVersion=_require2.compareVersion;var _require3=require("./js/hook"),createHooks=_require3.createHooks,removeHooks=_require3.removeHooks,createHookShell=_require3.createHookShell,removeHookShell=_require3.removeHookShell,createLocalShell=_require3.createLocalShell,removeLocalShell=_require3.removeLocalShell;var gitRevParse=require("./js/gitRevParse");var getConfig=require("./js/getConfig");var global=require("./js/global");var _require4=require("./js/global"),pwd=_require4.pwd,gitDir=_require4.gitDir,gitHookDir=_require4.gitHookDir;var ora=require("ora");var ciInfo=require("ci-info");program.name("gitm hook").usage("[command]").description("git hook钩子").arguments("[command]").option("--no-verify","是否需要跳过校验权限",false).option("-s, --since [since]","查询在某个时间之后的日志，填写格式：10s/2m/2h/3d/4M/5y","7d").option("-l, --limit [limit]","最多查询的日志条数").option("-b, --branches [branches]","要查询的分支").action(function(){var _ref=_asyncToGenerator(regeneratorRuntime.mark(function _callee(command,opt){var current,config,getIsMergedBranch,getIsUpdatedInTime,getIsMergeAction,getIsNeedPull,getGitVersion,gitVersion,gitVersionIsNew,_gitRevParse,prefix;return regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:current=getCurrent();config=getConfig();getIsMergedBranch=function getIsMergedBranch(){var branch=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"dev";var result=sh.exec("git branch --contains ".concat(current),{silent:true}).stdout.replace(/[\n\s]*$/g,"");return result.split("\n").includes(branch)};getIsUpdatedInTime=function getIsUpdatedInTime(){var isUpdated=false,mainVers=[],currentVers=[];var mainLogs=getLogs({since:opt.since,limit:opt.limit,branches:opt.branches});var currentLogs=getLogs({since:opt.since,limit:opt.limit,branches:current});mainLogs.forEach(function(log){mainVers.push(log["%H"])});currentLogs.forEach(function(log){var arr=log["%P"]?log["%P"].split(" "):[];arr.forEach(function(item){currentVers.push(item)})});mainVer:for(var _i=0,_mainVers=mainVers;_i<_mainVers.length;_i++){var ver=_mainVers[_i];if(currentVers.includes(ver)){isUpdated=true;break mainVer}}console.log(mainVers,currentVers);return isUpdated};getIsMergeAction=function getIsMergeAction(){var currentLogs=getLogs({limit:1,branches:current});var p=currentLogs[0]["%P"]?currentLogs[0]["%P"].split(" "):[];return p.length>1};getIsNeedPull=function getIsNeedPull(){sh.exec("git fetch",{silent:true});var result=sh.exec("git log ".concat(current,"..origin/").concat(current),{silent:true}).stdout.replace(/[\n\s]*$/g,"");return!!result};getGitVersion=function getGitVersion(){var version=sh.exec("git --version",{silent:true}).stdout.replace(/\s*$/g,"").match(/[\d.?]+/g);if(!version){sh.echo(warning("没有找到git"));sh.exit(1);return}version=version[0];return version};if(!opt.noVerify){_context.next=10;break}sh.exit(0);return _context.abrupt("return");case 10:if(!(command==="init")){_context.next=25;break}gitVersion=getGitVersion();gitVersionIsNew=compareVersion(gitVersion,"2.13.0");_gitRevParse=gitRevParse(),prefix=_gitRevParse.prefix;if(!(ciInfo.isCI&&config.skipCI)){_context.next=17;break}console.log("持续集成环境，跳过钩子安装");return _context.abrupt("return");case 17:if(!fs.existsSync(gitHookDir)){fs.mkdirSync(gitHookDir)}if(["1","true"].includes(process.env.GITMARS_SKIP_HOOKS||"")){sh.echo(warning("已存在环境变量GITMARS_SKIP_HOOKS，跳过安装"));process.exit(0)}if(!gitVersionIsNew){sh.echo(warning("Gitmars需要使用2.13.0以上版本的Git，当前版本："+gitVersion));process.exit(0)}createHooks(gitHookDir);createHookShell(gitHookDir);createLocalShell(gitHookDir,"yarn",prefix);_context.next=26;break;case 25:if(command==="remove"){removeHooks();removeHookShell();removeLocalShell()}else{}case 26:console.log("1. 当前分支是否合并过dev",getIsMergedBranch());console.log("2. 一周内是否同步过上游分支代码",getIsUpdatedInTime());console.log("3. 最后一条记录是否merge记录",getIsMergeAction());console.log("4. 是否需要pull代码",getIsNeedPull());console.log("gitm hook working!",gitHookDir);sh.exit(1);case 32:case"end":return _context.stop()}}},_callee)}));return function(_x,_x2){return _ref.apply(this,arguments)}}());program.parse(process.argv);