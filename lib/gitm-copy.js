#!/usr/bin/env node
"use strict";const{program:e}=require("commander"),c=require("shelljs"),{options:i,args:t}=require("./conf/copy"),{error:s,warning:o,queue:r,getStatus:n,getCurrent:a,isGitProject:g}=require("./js/index"),{createArgs:u}=require("./js/tools");g()||(c.echo(s("当前目录不是git项目目录")),c.exit(1)),e.name("gitm copy").usage("<from> [commitid...] [-k] [-a]").description("cherry-pick易用版本，从某个分支拷贝某条记录合并到当前分支"),t.length>0&&e.arguments(u(t)),i.forEach((c=>{e.option(c.flags,c.description,c.defaultValue)})),e.action(((e,i,t)=>{const s=n(),g=a();if(s||c.exit(1),""!==t.key||""!==t.author){const i=[`git checkout ${e}`,`git log --grep=${t.key} --author=${t.author}`];c.echo(o("为确保copy准确，请尽量完整填写关键词")),r(i).then((e=>{const i=[];if(0===e[1].code){const t=e[1].out.match(/(commit\s[a-z0-9]*\n+)/g)||[];let s=[`git checkout ${g}`];t.forEach((e=>{i.push(e.replace(/(commit\s)|\n/g,""))})),i.reverse(),i.length>0?s=s.concat([{cmd:`git cherry-pick ${i.join(" ")}`,config:{slient:!1,again:!1,success:"记录合并成功",fail:"合并失败，请根据提示处理"}},{cmd:"git push",config:{slient:!1,again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}}]):c.echo("没有找到任何记录"),r(s)}else c.echo(e[1].err)}))}else{const e=[{cmd:`git cherry-pick ${i.join(" ")}`,config:{slient:!1,again:!1,success:"记录合并成功",fail:"合并失败，请根据提示处理"}},{cmd:"git push",config:{slient:!1,again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}}];r(e)}})),e.parse(process.argv);
