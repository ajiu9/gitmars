"use strict";require("core-js/modules/es.array.concat.js");require("core-js/modules/es.array.filter.js");require("core-js/modules/es.array.for-each.js");require("core-js/modules/es.array.includes.js");require("core-js/modules/es.array.join.js");require("core-js/modules/es.array.map.js");require("core-js/modules/es.regexp.exec.js");require("core-js/modules/es.string.includes.js");require("core-js/modules/es.string.replace.js");require("core-js/modules/es.string.split.js");require("core-js/modules/web.dom-collections.for-each.js");var fs=require("fs");var path=require("path");var sh=require("shelljs");var _require=require("../index"),warning=_require.warning,getCurrent=_require.getCurrent,getLogs=_require.getLogs,compareVersion=_require.compareVersion;var _require2=require("../global"),hookList=_require2.hookList;var _require3=require("../gitRevParse")(),gitHookDir=_require3.gitHookDir,prefix=_require3.prefix;var gitVersion=require("../getGitVersion")();var getHookComment=require("./getHookComment");var getHookType=require("./getHookType");var getHookShell=require("./getHookShell");var getLocalShell=require("./getLocalShell");var ciInfo=require("ci-info");var current=getCurrent();function createHooks(){var dir=arguments.length>0&&arguments[0]!==undefined?arguments[0]:gitHookDir;var writeHook=function writeHook(filename,shell){fs.writeFileSync(filename,shell,"utf-8");fs.chmodSync(filename,493)};var hooks=hookList.map(function(hookName){return path.join(dir,hookName)});hooks.forEach(function(filename,i){var hookShell="#!/bin/sh\n# gitmars\n\n".concat(getHookComment(),'\n\n. "$(dirname "$0")/gitmars.sh"');var name=path.basename(filename);if(fs.existsSync(filename)){var hook=fs.readFileSync(filename,"utf-8");if(getHookType.isGhooks(hook)){console.info("合并已存在的ghooks钩子: ".concat(name));return writeHook(filename,hookShell)}if(getHookType.isPreCommit(hook)){console.info("合并已存在的pre-commit钩子: ".concat(name));return writeHook(filename,hookShell)}if(getHookType.isGitmars(hook)||getHookType.isHusky(hook)||getHookType.isYorkie(hook)){return writeHook(filename,hookShell)}console.info("跳过已存在的用户git钩子: ".concat(name));return}writeHook(filename,hookShell)})}function removeHooks(){var dir=arguments.length>0&&arguments[0]!==undefined?arguments[0]:gitHookDir;var hooks=hookList.map(function(hookName){return path.join(dir,hookName)});hooks.filter(function(filename){if(fs.existsSync(filename)){var hook=fs.readFileSync(filename,"utf-8");return getHookType.isGitmars(hook)}return false}).forEach(function(filename){fs.unlinkSync(filename)})}function createHookShell(){var dir=arguments.length>0&&arguments[0]!==undefined?arguments[0]:gitHookDir;var filename=path.join(dir,"gitmars.sh");fs.writeFileSync(filename,getHookShell(),"utf-8");fs.chmodSync(filename,493)}function removeHookShell(){var dir=arguments.length>0&&arguments[0]!==undefined?arguments[0]:gitHookDir;var filename=path.join(dir,"gitmars.sh");if(fs.existsSync(filename))fs.unlinkSync(filename)}function createLocalShell(){var dir=arguments.length>0&&arguments[0]!==undefined?arguments[0]:gitHookDir;var pmName=arguments.length>1?arguments[1]:undefined;var relativeUserPkgDir=arguments.length>2?arguments[2]:undefined;var filename=path.join(dir,"gitmars.local.sh");fs.writeFileSync(filename,getLocalShell(pmName,relativeUserPkgDir),"utf-8");fs.chmodSync(filename,493)}function removeLocalShell(){var dir=arguments.length>0&&arguments[0]!==undefined?arguments[0]:gitHookDir;var filename=path.join(dir,"gitmars.local.sh");if(fs.existsSync(filename))fs.unlinkSync(filename)}function getIsMergedBranch(){var branch=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"dev";var result=sh.exec("git branch --contains ".concat(current),{silent:true}).stdout.replace(/[\s]*$/g,"");return result.split("\n").includes(branch)}function getIsUpdatedInTime(_ref){var latest=_ref.latest,limit=_ref.limit,branches=_ref.branch;var isUpdated=false,mainVers=[],currentVers=[];var mainLogs=getLogs({latest:latest,limit:limit,branches:branches});var currentLogs=getLogs({latest:latest,limit:limit,branches:current});mainLogs.forEach(function(log){mainVers.push(log["%H"])});currentLogs.forEach(function(log){var arr=log["%P"]?log["%P"].split(" "):[];arr.forEach(function(item){currentVers.push(item)})});mainVer:for(var _i=0,_mainVers=mainVers;_i<_mainVers.length;_i++){var ver=_mainVers[_i];if(currentVers.includes(ver)){isUpdated=true;break mainVer}}return isUpdated}function getIsMergeAction(){var currentLogs=getLogs({limit:1,branches:current});var p=currentLogs[0]["%P"]?currentLogs[0]["%P"].split(" "):[];return p.length>1}function getBehandLogs(){sh.exec("git fetch",{silent:true});var result=sh.exec("git log ".concat(current,"..origin/").concat(current,' --pretty=format:"%p"'),{silent:true}).stdout.replace(/[\s]*$/g,"");return result?result.split("\n"):[]}function getAheadLogs(){sh.exec("git fetch",{silent:true});var result=sh.exec("git log origin/".concat(current,"..").concat(current,' --pretty=format:"%p"'),{silent:true}).stdout.replace(/[\s]*$/g,"");return result?result.split("\n"):[]}function init(){var gitVersionIsNew=compareVersion(gitVersion,"2.13.0");if(ciInfo.isCI&&config.skipCI){console.info("持续集成环境，跳过钩子安装");return}if(!fs.existsSync(gitHookDir)){fs.mkdirSync(gitHookDir)}if(["1","true"].includes(process.env.GITMARS_SKIP_HOOKS||"")){sh.echo(warning("已存在环境变量GITMARS_SKIP_HOOKS，跳过安装"));process.exit(0)}if(!gitVersionIsNew){sh.echo(warning("Gitmars需要使用2.13.0以上版本的Git，当前版本："+gitVersion));process.exit(0)}createHooks(gitHookDir);createHookShell(gitHookDir);createLocalShell(gitHookDir,"yarn",prefix)}function remove(){removeHooks();removeHookShell();removeLocalShell()}module.exports={init:init,remove:remove,getIsMergedBranch:getIsMergedBranch,getIsUpdatedInTime:getIsUpdatedInTime,getIsMergeAction:getIsMergeAction,getBehandLogs:getBehandLogs,getAheadLogs:getAheadLogs};