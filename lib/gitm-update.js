#!/usr/bin/env node
"use strict";require("core-js/modules/es.symbol");require("core-js/modules/es.symbol.description");require("core-js/modules/es.symbol.iterator");require("core-js/modules/es.array.concat");require("core-js/modules/es.array.for-each");require("core-js/modules/es.array.from");require("core-js/modules/es.array.includes");require("core-js/modules/es.array.iterator");require("core-js/modules/es.array.slice");require("core-js/modules/es.function.name");require("core-js/modules/es.object.to-string");require("core-js/modules/es.regexp.exec");require("core-js/modules/es.regexp.flags");require("core-js/modules/es.regexp.to-string");require("core-js/modules/es.string.includes");require("core-js/modules/es.string.iterator");require("core-js/modules/es.string.split");require("core-js/modules/web.dom-collections.for-each");require("core-js/modules/web.dom-collections.iterator");function _slicedToArray(arr,i){return _arrayWithHoles(arr)||_iterableToArrayLimit(arr,i)||_unsupportedIterableToArray(arr,i)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i]}return arr2}function _iterableToArrayLimit(arr,i){if(typeof Symbol==="undefined"||!(Symbol.iterator in Object(arr)))return;var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break}}catch(err){_d=true;_e=err}finally{try{if(!_n&&_i["return"]!=null)_i["return"]()}finally{if(_d)throw _e}}return _arr}function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}var program=require("commander");var sh=require("shelljs");var _require=require("./conf/update"),options=_require.options,args=_require.args;var _require2=require("./js/index"),error=_require2.error,queue=_require2.queue,getStatus=_require2.getStatus,getCurrent=_require2.getCurrent,searchBranchs=_require2.searchBranchs,createArgs=_require2.createArgs;var config=require("./js/config");var _require3=require("./js/global"),defaults=_require3.defaults;program.name("gitm update").usage("[type] [name]").description("更新bug任务分支、更新feature功能开发分支、框架调整分支support");if(args.length>0)program.arguments(createArgs(args));options.forEach(function(o){program.option(o.flags,o.description,o.defaultValue)});program.action(function(type,name,opt){var allow=["bugfix","feature","support"];var deny=[defaults.master,defaults.develop,defaults.release,defaults.bugfix,defaults.support];var status=getStatus();if(!status)sh.exit(1);if(!type){var _getCurrent$split=getCurrent().split("/");var _getCurrent$split2=_slicedToArray(_getCurrent$split,2);type=_getCurrent$split2[0];name=_getCurrent$split2[1];if(!name){deny.includes(type)&&sh.echo(error("骚年，你在".concat(type,"分支执行这个指令是什么骚操作？")));sh.exit(1)}}else if(!name){if(allow.includes(type)){sh.echo("请输入分支名称");sh.exit(1)}var branchs=searchBranchs({type:type});if(branchs.length===1){var _branchs$0$split=branchs[0].split("/");var _branchs$0$split2=_slicedToArray(_branchs$0$split,2);type=_branchs$0$split2[0];name=_branchs$0$split2[1]}else{sh.echo(branchs.length>1?"查询到多条名称包含".concat(type,"的分支，请输入分支类型"):error("分支不存在，请正确输入"));sh.exit(1)}}if(allow.includes(type)&&name){var base=type==="bugfix"?config.bugfix:type==="support"?config.master:config.release,cmd=["git fetch","git checkout ".concat(base),"git pull","git checkout ".concat(type,"/").concat(name)];if(opt.useMerge){cmd.push({cmd:"git merge --no-ff ".concat(base),config:{slient:false,again:false,success:"".concat(base,"同步到").concat(type,"/").concat(name,"成功"),fail:"".concat(base,"同步到").concat(type,"/").concat(name,"出错了，请根据提示处理")}})}else{cmd.push({cmd:"git rebase ".concat(base),config:{slient:false,again:false,success:"".concat(base,"更新到").concat(type,"/").concat(name,"成功"),fail:"".concat(base,"更新到").concat(type,"/").concat(name,"出错了，请根据提示处理")}})}queue(cmd)}else{sh.echo(error("type只允许输入："+JSON.stringify(allow)));sh.exit(1)}});program.parse(process.argv);