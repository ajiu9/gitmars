#!/usr/bin/env node
"use strict";function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg);var value=info.value}catch(error){reject(error);return}if(info.done){resolve(value)}else{Promise.resolve(value).then(_next,_throw)}}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(undefined)})}}var program=require("commander");var sh=require("shelljs");var _require=require("./conf/admin"),create=_require.create,publish=_require.publish,update=_require.update,clean=_require.clean;var _require2=require("./js/api"),getUserToken=_require2.getUserToken;var _require3=require("./js/index"),error=_require3.error,success=_require3.success,queue=_require3.queue,getStatus=_require3.getStatus,checkBranch=_require3.checkBranch,getCurrent=_require3.getCurrent;var _require4=require("./js/tools"),createArgs=_require4.createArgs;var _require5=require("./js/getGitConfig")(),appName=_require5.appName;var config=require("./js/getConfig")();var _ref=config.api?getUserToken():{},token=_ref.token,level=_ref.level;if(create.args.length>0){var _program=program.name("gitm admin").usage("<command> <type>").description("创建bugfix、release、develop和support分支").command("create "+createArgs(create.args));create.options.forEach(function(o){_program.option(o.flags,o.description,o.defaultValue)});_program.action(function(){var _ref2=_asyncToGenerator(regeneratorRuntime.mark(function _callee(type){var opts,base,status,hasBase,exits,cmd;return regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:opts=["bugfix","release","develop","support"];base=type==="release"?config.master:config.release;status=getStatus();_context.next=5;return checkBranch(base);case 5:hasBase=_context.sent;_context.next=8;return checkBranch(config[type]);case 8:exits=_context.sent;if(!status)sh.exit(1);if(!hasBase){sh.echo(error(base+"分支不存在，请先创建"+base+"分支"));sh.exit(1)}if(exits){sh.echo(error(config[type]+"分支已存在，不需要重复创建"));sh.exit(1)}if(opts.includes(type)){cmd=["git fetch","git checkout ".concat(base),"git pull","git checkout -b ".concat(config[type]," ").concat(base)];queue(cmd).then(function(data){if(data[3].code===0){sh.echo("".concat(config[type],"分支创建成功，该分支基于").concat(base,"创建，您当前已经切换到").concat(config[type],"\n需要发版时，记得执行: ").concat(success("gitm admin publish "+config[type])))}})}else{sh.echo(error("type只允许输入："+opts.join(",")));sh.exit(1)}case 13:case"end":return _context.stop()}}},_callee)}));return function(_x){return _ref2.apply(this,arguments)}}())}if(publish.args.length>0){var _program2=program.name("gitm admin").usage("<command> <type>").description("发布bugfix、release、support分支").command("publish "+createArgs(publish.args));publish.options.forEach(function(o){_program2.option(o.flags,o.description,o.defaultValue)});_program2.action(function(){var _ref3=_asyncToGenerator(regeneratorRuntime.mark(function _callee2(type,opt){var opts,status,curBranch,cmd,key;return regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:opts=["bugfix","release","support"];status=getStatus();_context2.next=4;return getCurrent();case 4:curBranch=_context2.sent;if(!status)sh.exit(1);if(opts.includes(type)){cmd=!level||level<3?{bugfix:["git fetch","git checkout ".concat(config.bugfix),"git pull","git checkout ".concat(config.release),"git pull",{cmd:"git merge --no-ff ".concat(config.bugfix),config:{slient:false,again:false,postmsg:opt.postmsg,success:"".concat(config.bugfix,"合并到").concat(config.release,"成功"),fail:"".concat(config.bugfix,"合并到").concat(config.release,"出错了，请根据提示处理")}},{cmd:"git push",config:{slient:false,again:true,success:"推送成功",fail:"推送失败，请根据提示处理"}}],support:["git fetch","git checkout ".concat(config.support),"git pull","git checkout ".concat(config.release),"git pull",{cmd:"git merge --no-ff ".concat(config.support),config:{slient:false,again:false,success:"".concat(config.support,"合并到").concat(config.release,"成功"),fail:"".concat(config.support,"合并到").concat(config.release,"出错了，请根据提示处理")}},{cmd:"git push",config:{slient:false,again:true,success:"推送成功",fail:"推送失败，请根据提示处理"}},"git checkout ".concat(config.bugfix),"git pull",{cmd:"git merge --no-ff ".concat(config.support),config:{slient:false,again:false,success:"".concat(config.support,"合并到").concat(config.bugfix,"成功"),fail:"".concat(config.support,"合并到").concat(config.bugfix,"出错了，请根据提示处理")}},{cmd:"git push",config:{slient:false,again:true,success:"推送成功",fail:"推送失败，请根据提示处理"}}],release:["git fetch","git checkout ".concat(config.release),"git pull","git checkout ".concat(config.master),"git pull",{cmd:"git merge --no-ff ".concat(config.release),config:{slient:false,again:false,success:"".concat(config.release,"合并到").concat(config.master,"成功"),fail:"".concat(config.release,"合并到").concat(config.master,"出错了，请根据提示处理")}},{cmd:"git push",config:{slient:false,again:true,success:"推送成功",fail:"推送失败，请根据提示处理"}}]}:{bugfix:[{cmd:'curl -i -H "Content-Type: application/json" -X POST -d \'{"source_branch":"\''.concat(config.bugfix,'\'","target_branch":"\'').concat(config.release,'\'","private_token":"\'').concat(token,'\'","title":"Merge branch \'').concat(config.bugfix,"' into '").concat(config.release,"'\"}' \"").concat(config.gitHost,"/api/v4/projects/").concat(config.gitID,'/merge_requests"'),config:{slient:false,again:true,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}}],support:[{cmd:'curl -i -H "Content-Type: application/json" -X POST -d \'{"source_branch":"\''.concat(config.support,'\'","target_branch":"\'').concat(config.release,'\'","private_token":"\'').concat(token,'\'","title":"Merge branch \'').concat(config.support,"' into '").concat(config.release,"'\"}' \"").concat(config.gitHost,"/api/v4/projects/").concat(config.gitID,'/merge_requests"'),config:{slient:false,again:true,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},{cmd:'curl -i -H "Content-Type: application/json" -X POST -d \'{"source_branch":"\''.concat(config.support,'\'","target_branch":"\'').concat(config.bugfix,'\'","private_token":"\'').concat(token,'\'","title":"Merge branch \'').concat(config.support,"' into '").concat(config.bugfix,"'\"}' \"").concat(config.gitHost,"/api/v4/projects/").concat(config.gitID,'/merge_requests"'),config:{slient:false,again:true,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}}],release:[{cmd:'curl -i -H "Content-Type: application/json" -X POST -d \'{"source_branch":"\''.concat(config.release,'\'","target_branch":"\'').concat(config.master,'\'","private_token":"\'').concat(token,'\'","title":"Merge branch \'').concat(config.release,"' into '").concat(config.master,"'\"}' \"").concat(config.gitHost,"/api/v4/projects/").concat(config.gitID,'/merge_requests"'),config:{slient:false,again:true,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}}]};if(type==="bugfix"&&opt.prod){cmd[type]=cmd[type].concat(!level||level<3?["git checkout ".concat(config.master),"git pull",{cmd:"git merge --no-ff ".concat(config.bugfix),config:{slient:false,again:false,success:"".concat(config.bugfix,"合并到").concat(config.master,"成功"),fail:"".concat(config.bugfix,"合并到").concat(config.master,"出错了，请根据提示处理")}},{cmd:"git push",config:{slient:false,again:true,success:"推送成功",fail:"推送失败，请根据提示处理"}}]:[{cmd:'curl -i -H "Content-Type: application/json" -X POST -d \'{"source_branch":"\''.concat(config.bugfix,'\'","target_branch":"\'').concat(config.master,'\'","private_token":"\'').concat(token,'\'","title":"Merge branch \'').concat(config.bugfix,"' into '").concat(config.master,"'\"}' \"").concat(config.gitHost,"/api/v4/projects/").concat(config.gitID,'/merge_requests"'),config:{slient:false,again:true,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}}]);if(opt.build){cmd[type]=cmd[type].concat([{cmd:"gitm build ".concat(appName," --env bug --app ").concat(opt.build===true?"all":opt.build),config:{slient:true,again:false,success:"调起构建成功",fail:"调起构建失败"}}])}}if(type==="release"&&opt.build){cmd[type]=cmd[type].concat([{cmd:"gitm build ".concat(appName," --env prod --app ").concat(opt.build===true?"all":opt.build),config:{slient:true,again:false,success:"调起构建成功",fail:"调起构建失败"}}])}if(type==="release"&&opt.combine){if(opt.useRebase){cmd[type]=cmd[type].concat(["git checkout ".concat(config.release),"git pull","git checkout ".concat(config.bugfix),{cmd:"git pull origin ".concat(config.bugfix," --rebase"),config:{slient:false,again:true}},{cmd:"git rebase ".concat(config.release),config:{slient:false,again:false,postmsg:opt.postmsg,success:"".concat(config.release,"同步到").concat(config.bugfix,"成功"),fail:"".concat(config.release,"同步到").concat(config.bugfix,"出错了，请根据提示处理")}},{cmd:"git push",config:{slient:false,again:true,success:"推送成功",fail:"推送失败，请根据提示处理"}}])}else{cmd[type]=cmd[type].concat(!level||level<3?["git checkout ".concat(config.release),"git pull","git checkout ".concat(config.bugfix),"git pull",{cmd:"git merge --no-ff ".concat(config.release),config:{slient:false,again:false,postmsg:opt.postmsg,success:"".concat(config.release,"合并到").concat(config.bugfix,"成功"),fail:"".concat(config.release,"合并到").concat(config.bugfix,"出错了，请根据提示处理")}},{cmd:"git push",config:{slient:false,again:true,success:"推送成功",fail:"推送失败，请根据提示处理"}}]:[{cmd:'curl -i -H "Content-Type: application/json" -X POST -d \'{"source_branch":"\''.concat(config.release,'\'","target_branch":"\'').concat(config.bugfix,'\'","private_token":"\'').concat(token,'\'","title":"Merge branch \'').concat(config.release,"' into '").concat(config.bugfix,"'\"}' \"").concat(config.gitHost,"/api/v4/projects/").concat(config.gitID,'/merge_requests"'),config:{slient:false,again:true,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}}])}}for(key in cmd){cmd[key].push("git checkout ".concat(curBranch))}queue(cmd[type])}else{sh.echo(error("type只允许输入："+opts.join(",")));sh.exit(1)}case 7:case"end":return _context2.stop()}}},_callee2)}));return function(_x2,_x3){return _ref3.apply(this,arguments)}}())}if(update.args.length>0){var _program3=program.name("gitm admin").usage("<command> <type> [-m --mode [mode]]").description("更新bugfix、release、support分支代码").command("update "+createArgs(update.args));update.options.forEach(function(o){_program3.option(o.flags,o.description,o.defaultValue)});_program3.action(function(type,opt){var opts=["bugfix","release","support"];var base=type==="release"?config.master:config.release,mode="",status=getStatus();if(!status)sh.exit(1);if(opt.mode===1){mode=" --strategy-option ours"}else if(opt.mode===2){mode=" --strategy-option theirs"}if(opts.includes(type)){var cmd=!level||level<3?["git fetch","git checkout ".concat(base),"git pull","git checkout ".concat(config[type]),{cmd:"git pull",config:{slient:false,again:true}},{cmd:"git merge --no-ff ".concat(base).concat(mode),config:{slient:false,again:false,postmsg:opt.postmsg,success:"".concat(base,"同步到").concat(config[type],"成功"),fail:"".concat(base,"同步到").concat(config[type],"出错了，请根据提示处理")}},{cmd:"git push",config:{slient:false,again:true,success:"推送成功",fail:"推送失败，请根据提示处理"}}]:[{cmd:'curl -i -H "Content-Type: application/json" -X POST -d \'{"source_branch":"\''.concat(base,'\'","target_branch":"\'').concat(config[type],'\'","private_token":"\'').concat(token,'\'","title":"Merge branch \'').concat(base,"' into '").concat(config[type],"'\"}' \"").concat(config.gitHost,"/api/v4/projects/").concat(config.gitID,'/merge_requests"'),config:{slient:false,again:true,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}}];if(opt.useRebase){cmd=["git fetch","git checkout ".concat(base),"git pull","git checkout ".concat(config[type]),{cmd:"git pull origin ".concat(config[type]," --rebase"),config:{slient:false,again:true}},{cmd:"git rebase ".concat(base),config:{slient:false,again:false,postmsg:opt.postmsg,success:"".concat(base,"同步到").concat(config[type],"成功"),fail:"".concat(base,"同步到").concat(config[type],"出错了，请根据提示处理")}},{cmd:"git push",config:{slient:false,again:true,success:"推送成功",fail:"推送失败，请根据提示处理"}}]}queue(cmd)}else{sh.echo(error("type只允许输入："+opts.join(",")));sh.exit(1)}})}if(clean.args.length>0){var _program4=program.name("gitm admin").usage("<command> <type>").description("构建清理工作").command("clean "+createArgs(clean.args));clean.options.forEach(function(o){_program4.option(o.flags,o.description,o.defaultValue)});_program4.action(function(type){var opts=["bugfix","release","develop","master"];var status=getStatus();if(!status)sh.exit(1);if(opts.includes(type)){var cmd=["git fetch","git checkout . -f","git clean -fd","git checkout ".concat(config.master),"git branch -D ".concat(config[type]),"git fetch","git checkout ".concat(config[type]),"git pull"];if(type==="master")cmd=["git checkout .","git clean -fd","git checkout ".concat(config.master),"git clean -fd","git fetch","git pull"];queue(cmd)}else{sh.echo(error("type只允许输入："+opts.join(",")));sh.exit(1)}})}program.parse(process.argv);