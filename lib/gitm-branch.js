#!/usr/bin/env node
"use strict";var program=require("commander");var sh=require("shelljs");var _require=require("./conf/branch"),options=_require.options,args=_require.args;var _require2=require("./js/index"),queue=_require2.queue;var _require3=require("./js/tools"),createArgs=_require3.createArgs;program.name("gitm branch").usage("[-k --key [keyword]] [-t --type [type]] [-d --delete [branch]] [-r --remote [remote]] [-D --forcedelete [branch]]").description("分支查询、删除（注意该指令不用于创建分支，如需创建分支请走start流程）");if(args.length>0)program.arguments(createArgs(args));options.forEach(function(o){program.option(o.flags,o.description,o.defaultValue)});program.action(function(opt){var cmd=[];if(opt.delete){cmd.push("git branch -d ".concat(opt.delete))}else if(opt.forcedelete){cmd.push("git branch -D ".concat(opt.forcedelete))}else if(opt.upstream){if(typeof opt.upstream==="string"){cmd.push("git branch --set-upstream-to origin/".concat(opt.upstream))}else{cmd.push("git branch --unset-upstream")}}else{cmd.push("git branch -a");queue(cmd).then(function(data){data.forEach(function(el,index){if(index===0&&el.code===0){var list=el.out&&el.out.split("\n")||[];list=list.filter(function(el){var fit=true;if(opt.key){fit=fit&&el.indexOf(opt.key)>-1}if(opt.type){fit=fit&&el.indexOf(opt.type)>-1}if(opt.remote){fit=fit&&el.indexOf("remotes/origin")>-1}else{fit=fit&&el.indexOf("remotes/origin")===-1}return fit});sh.echo(list.join("\n"))}})});return}queue(cmd)});program.parse(process.argv);